openapi: 3.0.0
info:
  title: books
  version: '1.0'
  contact:
    name: Milan Baran
    email: milan.baran@gmail.com
  description: Book management and search  API
servers:
  - url: 'http://localhost:3000'
  - url: 'http://localhost:8080'
    description: ''
paths:
  '/books/{bookId}':
    parameters:
      - $ref: '#/components/parameters/bookId'
    get:
      summary: Get Book
      tags:
        - books
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: Book Not Found
      operationId: get-book
      description: Retrieve the information of the book with the matching book ID.
    patch:
      summary: Update Book
      operationId: patch-book
      responses:
        '200':
          description: Book Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
              examples: {}
        '400':
          $ref: '#/components/responses/BookConflict'
        '404':
          description: Not Found
        '409':
          $ref: '#/components/responses/BookConflict'
      description: Update the information of an existing book.
      tags:
        - books
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookPatch'
        description: ''
    delete:
      summary: Delete Book
      operationId: delete-book
      responses:
        '200':
          description: OK
        '404':
          description: Not Found
      description: Delete the information of an existing book.
      tags:
        - books
    put:
      summary: Update Or Create Book
      operationId: upsert-book
      description: Insert or update the information of a book.
      responses:
        '200':
          description: Book Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '201':
          description: Book Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          $ref: '#/components/responses/BookConflict'
        '409':
          $ref: '#/components/responses/BookConflict'
      tags:
        - books
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookPost'
  /books:
    post:
      summary: Create New Book
      operationId: post-book
      responses:
        '200':
          description: Book Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
              examples: {}
        '400':
          $ref: '#/components/responses/BookConflict'
        '409':
          $ref: '#/components/responses/BookConflict'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookPost'
            examples: {}
        description: Post the necessary fields for the API to create a new book.
      description: Create a new book.
      tags:
        - books
    parameters: []
    get:
      summary: Search books
      operationId: get-books
      responses:
        '200':
          $ref: '#/components/responses/BookSearch'
        '204':
          $ref: '#/components/responses/BookSearch'
        '413':
          description: Request Entity Too Large
      description: |-
        Retrieve a list of books.
        <br/>
        Example calls for search:
        <ul>
        <li>title==\'American Fantastic Tales Boxed Set\'</li>
        <li>title==American\*</li>
        <li>title==\*American\* and title==\*magazine\*</li>
        <li>title=in=(1,2,3)</li>
        <ul>
      parameters:
        - schema:
            type: string
          in: query
          name: search
          description: 'RSQL Format. More: https://github.com/jirutka/rsql-parser#examples'
        - schema:
            type: integer
            format: int32
            default: 0
          in: query
          name: page
          description: 'Default: 0 Page is a positive number representing index of a requested page'
        - schema:
            type: integer
            format: int32
            default: 10
          in: query
          name: limit
          description: 'Default: 10 Max: 100 Limit represent the size of element in response'
        - schema:
            type: string
            default: id
          in: query
          name: sort
          description: 'Default: Id Sort represent a field that elements in response are sorted with. '
      tags:
        - books
  '/books/{bookId}/authors/{authorId}':
    parameters:
      - $ref: '#/components/parameters/authorId'
      - $ref: '#/components/parameters/bookId'
    get:
      summary: Get Author
      tags:
        - authors
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
      operationId: get-book-author
      description: Retrieve the information of the book with the matching book ID.
    patch:
      summary: Update Author Information
      operationId: patch-book-author
      responses:
        '200':
          description: Author updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
        '404':
          description: Not Found
        '409':
          $ref: '#/components/responses/AuthorConflict'
      description: Update the information of an existing author.
      tags:
        - authors
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorPost'
    delete:
      summary: Delete Author
      operationId: delete-book-author
      responses:
        '200':
          description: OK
        '404':
          description: Not Found
      description: Delete the information of an existing author.
      tags:
        - authors
    put:
      summary: Update Or Create Author
      operationId: upsert-book-author
      responses:
        '200':
          description: Author updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
        '201':
          description: Author Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
        '400':
          $ref: '#/components/responses/AuthorConflict'
        '409':
          $ref: '#/components/responses/AuthorConflict'
      description: Insert or update the information of an author
      tags:
        - authors
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorPost'
  '/books/{bookId}/authors':
    parameters:
      - $ref: '#/components/parameters/bookId'
    get:
      summary: Get Author
      tags:
        - authors
      responses:
        '200':
          description: Authors found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
        '404':
          description: Not Found
      operationId: get-book-authors
      description: Retrieve the information of the book authors.
components:
  schemas:
    Book:
      title: Book
      type: object
      description: Book Get Object
      x-examples:
        Post Simple Book:
          title: The Lord of the Rings
          description: 'The Lord of the Rings is an epic high fantasy novel by the English author and scholar J. R. R. Tolkien. Set in Middle-earth, the world at some distant time in the past, the story began as a sequel to Tolkien''s 1937 children''s book The Hobbit, but eventually developed into a much larger work. Written in stages between 1937 and 1949, The Lord of the Rings is one of the best-selling books ever written, with over 150 million copies sold.'
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
        description:
          type: string
        authors:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/Author'
        created:
          type: string
          format: date-time
        modified:
          type: string
          format: date-time
        sequence:
          type: integer
          format: int64
    BookPost:
      title: BookPost
      type: object
      description: Book Post Object
      x-examples:
        Post Simple Book:
          title: The Lord of the Rings
          description: 'The Lord of the Rings is an epic high fantasy novel by the English author and scholar J. R. R. Tolkien. Set in Middle-earth, the world at some distant time in the past, the story began as a sequel to Tolkien''s 1937 children''s book The Hobbit, but eventually developed into a much larger work. Written in stages between 1937 and 1949, The Lord of the Rings is one of the best-selling books ever written, with over 150 million copies sold.'
      properties:
        title:
          type: string
        description:
          type: string
        authors:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/AuthorPost'
    BookPatch:
      title: BookPatch
      type: object
      description: Book Patch Object
      x-examples:
        Post Simple Book:
          title: The Lord of the Rings
          description: 'The Lord of the Rings is an epic high fantasy novel by the English author and scholar J. R. R. Tolkien. Set in Middle-earth, the world at some distant time in the past, the story began as a sequel to Tolkien''s 1937 children''s book The Hobbit, but eventually developed into a much larger work. Written in stages between 1937 and 1949, The Lord of the Rings is one of the best-selling books ever written, with over 150 million copies sold.'
      properties:
        title:
          type: string
        description:
          type: string
        authors:
          type: array
          items:
            $ref: '#/components/schemas/AuthorPatch'
    Author:
      title: Author
      type: object
      x-examples:
        Simple Author:
          id: 1
          name: J. R. R. Tolkien
      description: Author Get Object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
        name:
          type: string
        created:
          type: string
          format: date-time
        modified:
          type: string
          format: date-time
        sequence:
          type: integer
          format: int64
    AuthorPost:
      title: Author
      type: object
      properties:
        name:
          type: string
      x-examples:
        Simple Author:
          id: 1
          name: J. R. R. Tolkien
      description: Author API Object
    ApiError:
      type: object
      title: ApiError
      properties:
        code:
          type: string
          readOnly: true
        message:
          type: string
          readOnly: true
        errors:
          type: array
          items:
            type: string
            readOnly: true
          readOnly: true
      readOnly: true
      description: ''
    BookSearch:
      title: BookSearch
      type: object
      properties:
        bookTotalCount:
          type: integer
          format: int64
        booksPerPage:
          type: integer
        books:
          type: array
          items:
            $ref: '#/components/schemas/Book'
    AuthorPatch:
      title: AuthorPatch
      type: object
      description: Author Patch Object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
  securitySchemes: {}
  responses:
    BookSearch:
      description: '  '
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BookSearch'
    BookConflict:
      description: Example response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
    AuthorConflict:
      description: Example response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
  parameters:
    bookId:
      name: bookId
      in: path
      required: true
      schema:
        type: integer
        format: int64
      description: The book ID
    authorId:
      name: authorId
      in: path
      required: true
      schema:
        type: integer
        format: int64
      description: The author ID
tags:
  - name: authors
  - name: books
